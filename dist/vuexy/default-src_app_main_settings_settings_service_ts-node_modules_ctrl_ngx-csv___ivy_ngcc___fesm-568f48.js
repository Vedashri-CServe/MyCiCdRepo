(self["webpackChunkvuexy"] = self["webpackChunkvuexy"] || []).push([["default-src_app_main_settings_settings_service_ts-node_modules_ctrl_ngx-csv___ivy_ngcc___fesm-568f48"],{

/***/ 65355:
/*!***************************************************!*\
  !*** ./src/app/main/settings/settings.service.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SettingsService": () => (/* binding */ SettingsService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! environments/environment */ 92340);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 84505);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common/http */ 58987);
/* harmony import */ var _auth_service_authentication_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../auth/service/authentication.service */ 65015);






class SettingsService {
    constructor(_httpClient, authenticationService) {
        this._httpClient = _httpClient;
        this.authenticationService = authenticationService;
        this.checkUserRole = false;
        //CPA Module 
        this.cpaClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        this.cpaEditClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        //Client Module
        this.clientClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        this.clientEditClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        // Task Module
        this.taskClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        this.taskEditClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        // Process Module
        this.processClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        this.processEditClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        // Sub Process Module
        this.subProcessClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        this.subProcessEditClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        // Status Module
        this.statusClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        this.statusEditClickedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        this.authenticationService.getValue().subscribe((value) => {
            this.checkUserRole = value;
        });
        this.getCPAListArray();
        this.getProcessListArray();
        this.onCPAListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onTotalListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onSubProcessListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onClientListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onUserListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onTaskListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onProcessListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onStatusListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onRoleBaseDataChange = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onDepeartmentList = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onUserTypetList = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onCPAList = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onProcessList = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onTypeOfWorkChange = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onBillingTypeChange = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onReportingManager = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onTotalCountListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onTotalUserListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onTaskTotalListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
        this.onProcessTotalListChanged = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([]);
    }
    isEditofCpa(msg) {
        this.cpaClickedEvent.emit(msg);
    }
    isEditDataofCpa(editData) {
        this.cpaEditClickedEvent.emit(editData);
    }
    getDataTableRows(index, pageSize, GlobalSearch) {
        let json = {
            "OrganizationType": 2,
            "Index": index,
            "PageSize": pageSize,
            "SortColumn": null,
            "IsDesc": true,
            "GlobalSearch": GlobalSearch,
            "TypeOfWork": null,
            "BillingType": null,
            "ContractedHours": null,
            "IsAvailable": null,
            "IsDownload": false
        };
        return new Promise((resolve, reject) => {
            this._httpClient.post(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/organizationuser/list`, json).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response.ResponseData.List;
                    this.onCPAListChanged.next(this.rows);
                    this.onTotalListChanged.next(response.ResponseData);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    ;
    getDataTableRowsExportClient(json, responseType) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/organizationuser/list`;
        return this._httpClient.post(url, json, { responseType: responseType });
    }
    //add cpa data on add time
    addCpaData(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/organizationuser/save`;
        return this._httpClient.post(url, json);
    }
    deletCPA(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/organizationuser/delete`;
        return this._httpClient.post(url, json);
    }
    isEditofclient(msg) {
        this.clientClickedEvent.emit(msg);
    }
    isEditDataofClient(editData) {
        this.clientEditClickedEvent.emit(editData);
    }
    //Get all client data for client tab
    getDataTableRowsClient(index, pageSize, GlobalSearch) {
        let json = {
            "OrganizationType": 3,
            "Index": index,
            "PageSize": pageSize,
            "SortColumn": null,
            "IsDesc": true,
            "GlobalSearch": GlobalSearch,
            "TypeOfWork": null,
            "BillingType": null,
            "ContractedHours": null,
            "IsAvailable": null,
            "IsDownload": false
        };
        return new Promise((resolve, reject) => {
            this._httpClient.post(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/organizationuser/list`, json).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response.ResponseData.List;
                    this.onClientListChanged.next(this.rows);
                    this.onTotalCountListChanged.next(response.ResponseData);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    getDataTableRowsExportProject(json, responseType) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/organizationuser/list`;
        return this._httpClient.post(url, json, { responseType: responseType });
    }
    //Add client data on add time
    addClientData(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/organizationuser/save`;
        return this._httpClient.post(url, json);
    }
    //Delete client
    deletClient(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/organizationuser/delete`;
        return this._httpClient.post(url, json);
    }
    getAllTypeofWork() {
        return new Promise((resolve, reject) => {
            const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/gettypeofworklist`;
            this._httpClient.get(url).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response.ResponseData;
                    this.onTypeOfWorkChange.next(this.rows);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    getAllBillingType() {
        return new Promise((resolve, reject) => {
            const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/getbillingtypelist`;
            this._httpClient.get(url).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response.ResponseData;
                    this.onBillingTypeChange.next(this.rows);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    //user module 
    //get all user data for client tab
    getDataTableRowsUser(index, PageSize, GlobalSearch) {
        let json = {
            "GlobalSearch": GlobalSearch,
            "RoleTypeId": null,
            "DepartmentId": null,
            "PageNo": index,
            "PageSize": PageSize,
            "SortColumn": null,
            "IsDesc": true,
            "IsAvailable": null,
            "IsDownload": false
        };
        return new Promise((resolve, reject) => {
            this._httpClient.post(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/list`, json).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response.ResponseData.List;
                    this.onUserListChanged.next(this.rows);
                    this.onTotalUserListChanged.next(response.ResponseData);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    getDataTableRowsExportUser(json, responseType) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/list`;
        return this._httpClient.post(url, json, { responseType: responseType });
    }
    //get all department data
    getDepartmentList() {
        return new Promise((resolve, reject) => {
            this._httpClient.get(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/departmentdropdown`).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response;
                    this.onDepeartmentList.next(this.rows);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    //get all department data
    getCPAListArray() {
        return new Promise((resolve, reject) => {
            this._httpClient.post(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/organizationuser/getcpalist`, { "CallByDWP": false }).subscribe((response) => {
                this.rows = response;
                this.onCPAList.next(this.rows);
                resolve(this.rows);
            }, reject);
        });
    }
    //get user type data
    getUserTypeList() {
        return new Promise((resolve, reject) => {
            this._httpClient.get(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/usertypedropdown`).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response;
                    this.onUserTypetList.next(this.rows);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    //get user type data
    getReportingManager() {
        return new Promise((resolve, reject) => {
            this._httpClient.get(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/getreportingmanagerdropdown`).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    var reportingData = response;
                    this.onReportingManager.next(reportingData);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    //delete user data 
    deleteUser(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/delete`;
        return this._httpClient.post(url, json);
    }
    // Add User Data
    addUserData(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/save`;
        return this._httpClient.post(url, json);
    }
    getProcessListMaster() {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/masterlist`;
        return this._httpClient.get(url);
    }
    //Change User Status
    updateStatus(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/InActiveAccount`;
        return this._httpClient.post(url, json);
    }
    isEditofTask(msg) {
        this.taskClickedEvent.emit(msg);
    }
    isEditDataofTask(editData) {
        this.taskEditClickedEvent.emit(editData);
    }
    //Get all task data
    getDataTableRowsTask(index, PageSize, GlobalSearch) {
        let json = {
            "GlobalSearch": GlobalSearch,
            "PageNo": index,
            "PageSize": PageSize,
            "TaskName": null,
            "IsAvailable": null,
            "IsDownload": false
        };
        return new Promise((resolve, reject) => {
            this._httpClient.post(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/gettasklist`, json).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response.ResponseData.List;
                    this.onTaskListChanged.next(this.rows);
                    this.onTaskTotalListChanged.next(response.ResponseData);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    getDataTableRowsExportTask(json, responseType) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/gettasklist`;
        return this._httpClient.post(url, json, { responseType: responseType });
    }
    // Add Task Data
    addTask(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/savetask`;
        return this._httpClient.post(url, json);
    }
    //Delete Task data 
    deleteTask(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/deleteTask`;
        return this._httpClient.post(url, json);
    }
    isEditofProcess(msg) {
        this.processClickedEvent.emit(msg);
    }
    isEditDataofProcess(editData) {
        this.processEditClickedEvent.emit(editData);
    }
    //Get all Process data
    getDataTableRowsProcess(index, PageSize, GlobalSearch) {
        let json = {
            "GlobalSearch": GlobalSearch,
            "ProcessName": null,
            "EstimatedDuration": null,
            "PageNo": index,
            "PageSize": PageSize,
            "SortColumn": null,
            "IsDesc": true,
            "IsAvailable": null,
            "IsDownload": false
        };
        return new Promise((resolve, reject) => {
            this._httpClient.post(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/list`, json).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response.ResponseData.List;
                    this.onProcessListChanged.next(this.rows);
                    this.onProcessTotalListChanged.next(response.ResponseData);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    getDataTableRowsExportProcess(json, responseType) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/list`;
        return this._httpClient.post(url, json, { responseType: responseType });
    }
    // Add Process Data
    addProcess(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/save`;
        return this._httpClient.post(url, json);
    }
    //Delete Process data 
    deleteProcess(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/delete`;
        return this._httpClient.post(url, json);
    }
    isEditofSubProcess(msg) {
        this.subProcessClickedEvent.emit(msg);
    }
    isEditDataofSubProcess(editData) {
        this.subProcessEditClickedEvent.emit(editData);
    }
    //Get all Sub Process data
    getDataTableRowsSubProcess() {
        let json = {
            "GlobalSearch": null,
            "SubProcessName": null,
            "PageNo": 1,
            "PageSize": 50000,
            "SortColumn": null,
            "IsDesc": 1,
            "ProcessId": null,
            "IsAvailable": null
        };
        return new Promise((resolve, reject) => {
            this._httpClient.post(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/getsubprocesslist`, json).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response.ResponseData.List;
                    this.onSubProcessListChanged.next(this.rows);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    //get all Process List data
    getProcessListArray() {
        let processJson = {
            "GlobalSearch": null,
            "ProcessName": null,
            "EstimatedDuration": null,
            "PageNo": 1,
            "PageSize": 50000,
            "SortColumn": null,
            "IsDesc": true,
            "IsAvailable": null
        };
        return new Promise((resolve, reject) => {
            this._httpClient.post(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/list`, processJson).subscribe((response) => {
                this.rows = response;
                this.onProcessList.next(this.rows);
                resolve(this.rows);
            }, reject);
        });
    }
    // Add SubProcess Data
    addSubProcess(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/savesubprocess`;
        return this._httpClient.post(url, json);
    }
    //Delete SubProcess data 
    deleteSubProcess(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/deletesubprocess`;
        return this._httpClient.post(url, json);
    }
    addCPAProcess(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/saveCpaProcesses`;
        return this._httpClient.post(url, json);
    }
    getCPAProcess(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/getCpaProcesses`;
        return this._httpClient.post(url, json);
    }
    isEditofStatus(msg) {
        this.statusClickedEvent.emit(msg);
    }
    isEditDataofStatus(editData) {
        this.statusEditClickedEvent.emit(editData);
    }
    //Get all Process data
    getDataTableRowsStatus() {
        let json = {
            "Index": 1,
            "PageSize": 50000
        };
        return new Promise((resolve, reject) => {
            this._httpClient.post(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/getstatuslist`, json).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response.ResponseData.List;
                    this.onStatusListChanged.next(this.rows);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    //add Status data
    addStatusData(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/savestatus`;
        return this._httpClient.post(url, json);
    }
    //Delete Status
    deletStatus(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/setting/deletestatus`;
        return this._httpClient.post(url, json);
    }
    //permission module
    getRoleBaseData(json) {
        return new Promise((resolve, reject) => {
            this._httpClient.post(`${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/getusermenulist`, json).subscribe((response) => {
                if (response && response.ResponseData !== null) {
                    this.rows = response.ResponseData;
                    this.onRoleBaseDataChange.next(this.rows);
                    resolve(this.rows);
                }
            }, reject);
        });
    }
    updateUserMenuList(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/updatemenulist`;
        return this._httpClient.post(url, json);
    }
    addRoleBaseData(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/saveroletypeforpermission`;
        return this._httpClient.post(url, json);
    }
    getUserListDataPermission() {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/getpermissionrolelist`;
        return this._httpClient.get(url);
    }
    deleteRoleBase(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUserManagementUrl}/user/deleteroletype`;
        return this._httpClient.post(url, json);
    }
    importCSVData(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/import/projectexcel`;
        return this._httpClient.post(url, json);
    }
    downloadFileExport(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/import/DownloadInvalidRecodes`;
        return this._httpClient.post(url, json, { responseType: 'blob' });
    }
    downloadFile() {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiHelpUrl}/tutorial/getGeneralFile`;
        return this._httpClient.get(url);
    }
    addPrcessName(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/saveandeditprocess`;
        return this._httpClient.post(url, json);
    }
    deleteProcesswithSubProcess(json) {
        const url = `${environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiSettingsUrl}/process/deleteprocesswithsubProcess`;
        return this._httpClient.post(url, json);
    }
}
SettingsService.ɵfac = function SettingsService_Factory(t) { return new (t || SettingsService)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_4__.HttpClient), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_auth_service_authentication_service__WEBPACK_IMPORTED_MODULE_1__.AuthenticationService)); };
SettingsService.ɵprov = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({ token: SettingsService, factory: SettingsService.ɵfac, providedIn: 'root' });


/***/ }),

/***/ 30839:
/*!**************************************************************************!*\
  !*** ./node_modules/@ctrl/ngx-csv/__ivy_ngcc__/fesm2015/ctrl-ngx-csv.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CsvDirective": () => (/* binding */ CsvDirective),
/* harmony export */   "CsvModule": () => (/* binding */ CsvModule),
/* harmony export */   "arrays2csv": () => (/* binding */ arrays2csv),
/* harmony export */   "blob": () => (/* binding */ blob),
/* harmony export */   "buildURI": () => (/* binding */ buildURI),
/* harmony export */   "elementOrEmpty": () => (/* binding */ elementOrEmpty),
/* harmony export */   "isArrays": () => (/* binding */ isArrays),
/* harmony export */   "isJsons": () => (/* binding */ isJsons),
/* harmony export */   "joiner": () => (/* binding */ joiner),
/* harmony export */   "jsons2arrays": () => (/* binding */ jsons2arrays),
/* harmony export */   "jsons2csv": () => (/* binding */ jsons2csv),
/* harmony export */   "jsonsHeaders": () => (/* binding */ jsonsHeaders),
/* harmony export */   "string2csv": () => (/* binding */ string2csv),
/* harmony export */   "toCSV": () => (/* binding */ toCSV)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ 34497);





const isJsons = array => Array.isArray(array) && array.every(row => typeof row === 'object' && !(row instanceof Array));

const isArrays = array => Array.isArray(array) && array.every(row => Array.isArray(row));

function jsonsHeaders(array) {
  return Array.from(new Set(array.map(item => Object.keys(item)).reduce((a, b) => [...a, ...b], [])));
}

function jsons2arrays(jsons, headers) {
  headers = headers || jsonsHeaders(jsons); // allow headers to have custom labels, defaulting to having the header data key be the label

  let headerLabels = headers;
  let headerKeys = headers;

  if (isJsons(headers)) {
    headerLabels = headers.map(header => header.label);
    headerKeys = headers.map(header => header.key);
  }

  const data = jsons.map(object => headerKeys.map(header => header in object ? object[header] : ''));
  return [headerLabels, ...data];
}

const elementOrEmpty = element => element || element === 0 ? element : '';

function joiner(data, delimiter = ',') {
  return data.map((row, index) => row.map(element => '"' + elementOrEmpty(element) + '"').join(delimiter)).join(`\n`);
}

function arrays2csv(data, headers, delimiter) {
  return joiner(headers ? [headers, ...data] : data, delimiter);
}

function jsons2csv(data, headers, delimiter) {
  return joiner(jsons2arrays(data, headers), delimiter);
}

function string2csv(data, headers, delimiter) {
  return headers ? `${headers.join(delimiter)}\n${data}` : data;
}

function toCSV(data, headers, delimiter) {
  if (isJsons(data)) {
    return jsons2csv(data, headers, delimiter);
  }

  if (isArrays(data)) {
    return arrays2csv(data, headers, delimiter);
  }

  if (typeof data === 'string') {
    return string2csv(data, headers, delimiter);
  }

  throw new TypeError(`Data should be a "String", "Array of arrays" OR "Array of objects" `);
}

function blob(data, uFEFF = true, headers, delimiter) {
  const csv = toCSV(data, headers, delimiter);
  return new Blob([uFEFF ? '\uFEFF' : '', csv], {
    type: 'text/csv'
  });
}

function buildURI(data, uFEFF = true, headers, delimiter) {
  return URL.createObjectURL(blob(data, uFEFF, headers, delimiter));
}

class CsvDirective {
  constructor(sanitizer) {
    this.sanitizer = sanitizer;
    /** the body of the csv */

    this.data = [];
    /** Set the seperator between values */

    this.delimiter = ',';
    /** adds a Byte order mark to setup the csv as UTF-8  */

    this.uFEFF = true;
    /** filename */

    this.download = 'data.csv';
    this.target = this.isIEBrowser() ? '' : '_blank';
  }
  /** Set the filename of the csv. Default is `data.csv` */


  set filename(a) {
    this.download = a;
  }

  onClick() {
    // IE handling
    if (this.isIEBrowser()) {
      const file = blob(this.data, this.uFEFF, this.headers, this.delimiter);
      window.navigator.msSaveBlob(file, this.download);
    }
  }

  isIEBrowser() {
    return !!window.navigator.msSaveOrOpenBlob;
  }

  ngOnChanges() {
    this.href = this.sanitizer.bypassSecurityTrustResourceUrl(buildURI(this.data, this.uFEFF, this.headers, this.delimiter));
  }

}

CsvDirective.ɵfac = function CsvDirective_Factory(t) {
  return new (t || CsvDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__.DomSanitizer));
};

CsvDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CsvDirective,
  selectors: [["", "csvLink", ""]],
  hostVars: 3,
  hostBindings: function CsvDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function CsvDirective_click_HostBindingHandler() {
        return ctx.onClick();
      });
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵhostProperty"]("download", ctx.download)("target", ctx.target)("href", ctx.href, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrlOrResourceUrl"]);
    }
  },
  inputs: {
    data: "data",
    delimiter: "delimiter",
    uFEFF: "uFEFF",
    target: "target",
    filename: "filename",
    headers: "headers"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});

CsvDirective.ctorParameters = () => [{
  type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__.DomSanitizer
}];

CsvDirective.propDecorators = {
  data: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  headers: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  delimiter: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  filename: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  uFEFF: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  href: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
  }],
  download: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
  }],
  target: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
  }],
  onClick: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
    args: ['click']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CsvDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[csvLink]'
    }]
  }], function () {
    return [{
      type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__.DomSanitizer
    }];
  }, {
    data: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    delimiter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    uFEFF: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    download: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
    }],
    target: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
    }],
    filename: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    onClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['click']
    }],
    href: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
    }],
    headers: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();

class CsvModule {}

CsvModule.ɵfac = function CsvModule_Factory(t) {
  return new (t || CsvModule)();
};

CsvModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: CsvModule
});
CsvModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CsvModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [CsvDirective],
      exports: [CsvDirective]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](CsvModule, {
    declarations: [CsvDirective],
    exports: [CsvDirective]
  });
})();
/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 65226:
/*!*******************************************************!*\
  !*** ./node_modules/file-saver/dist/FileSaver.min.js ***!
  \*******************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (a, b) {
  if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(this, function () {
  "use strict";

  function b(a, b) {
    return "undefined" == typeof b ? b = {
      autoBom: !1
    } : "object" != typeof b && (console.warn("Deprecated: Expected third argument to be a object"), b = {
      autoBom: !b
    }), b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(["\uFEFF", a], {
      type: a.type
    }) : a;
  }

  function c(a, b, c) {
    var d = new XMLHttpRequest();
    d.open("GET", a), d.responseType = "blob", d.onload = function () {
      g(d.response, b, c);
    }, d.onerror = function () {
      console.error("could not download file");
    }, d.send();
  }

  function d(a) {
    var b = new XMLHttpRequest();
    b.open("HEAD", a, !1);

    try {
      b.send();
    } catch (a) {}

    return 200 <= b.status && 299 >= b.status;
  }

  function e(a) {
    try {
      a.dispatchEvent(new MouseEvent("click"));
    } catch (c) {
      var b = document.createEvent("MouseEvents");
      b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b);
    }
  }

  var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0,
      a = f.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent),
      g = f.saveAs || ("object" != typeof window || window !== f ? function () {} : "download" in HTMLAnchorElement.prototype && !a ? function (b, g, h) {
    var i = f.URL || f.webkitURL,
        j = document.createElement("a");
    g = g || b.name || "download", j.download = g, j.rel = "noopener", "string" == typeof b ? (j.href = b, j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b), setTimeout(function () {
      i.revokeObjectURL(j.href);
    }, 4E4), setTimeout(function () {
      e(j);
    }, 0));
  } : "msSaveOrOpenBlob" in navigator ? function (f, g, h) {
    if (g = g || f.name || "download", "string" != typeof f) navigator.msSaveOrOpenBlob(b(f, h), g);else if (d(f)) c(f, g, h);else {
      var i = document.createElement("a");
      i.href = f, i.target = "_blank", setTimeout(function () {
        e(i);
      });
    }
  } : function (b, d, e, g) {
    if (g = g || open("", "_blank"), g && (g.document.title = g.document.body.innerText = "downloading..."), "string" == typeof b) return c(b, d, e);
    var h = "application/octet-stream" === b.type,
        i = /constructor/i.test(f.HTMLElement) || f.safari,
        j = /CriOS\/[\d]+/.test(navigator.userAgent);

    if ((j || h && i || a) && "undefined" != typeof FileReader) {
      var k = new FileReader();
      k.onloadend = function () {
        var a = k.result;
        a = j ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;"), g ? g.location.href = a : location = a, g = null;
      }, k.readAsDataURL(b);
    } else {
      var l = f.URL || f.webkitURL,
          m = l.createObjectURL(b);
      g ? g.location = m : location.href = m, g = null, setTimeout(function () {
        l.revokeObjectURL(m);
      }, 4E4);
    }
  });
  f.saveAs = g.saveAs = g,  true && (module.exports = g);
});

/***/ })

}]);
//# sourceMappingURL=default-src_app_main_settings_settings_service_ts-node_modules_ctrl_ngx-csv___ivy_ngcc___fesm-568f48.js.map